global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}$0
endsnippet

snippet beq "Equation" wA
\\begin{equation}
${1:${VISUAL}}
\\end{equation}$0
endsnippet

snippet beeq "Equation w/o numbering" wA
\\begin{equation*}
${1:${VISUAL}}
\\end{equation*}$0
endsnippet

priority 10
context "math()"
snippet qquad "qquad" iA
\\qquad$0
endsnippet

priority 5
context "math()"
snippet quad "quad" iA
\\quad$0
endsnippet

context "math()"
snippet ensp "enspace" iA
\\enspace$0
endsnippet

context "math()"
snippet ff "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet df "Differential fraction" iA
\\frac{d$1}{d$2}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '_' "subscript" wrA
_{$0}
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([A-Za-z])(k)\2' "auto subscript k" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet == "equals" iA
&= $1 \\\\
endsnippet

context "math()"
snippet leq "less equals" iA
\leq 
endsnippet

context "math()"
snippet geq "greater equals" iA
\geq 
endsnippet

context "math()"
snippet != "not equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "math()"
snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

context "math()"
snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix}$0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right$0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet over "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet int "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:f(x)} \, d${4:x}
endsnippet

context "math()"
snippet sum "sum" w
\sum_{${1:i=1}}^{${2:N}} ${3:a_n z^n}
endsnippet

context "math()"
snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet par "d/dx" w
\frac{\partial ${1}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{($1)}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet dr "to the ... power" iA
{}^{$1}$0
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet inf "\infty" iA
\infty
endsnippet

context "math()"
snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

context "math()"
snippet <= "leq" iA
\le 
endsnippet

context "math()"
snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "exists" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

context "math()"
snippet R0+ "R0+" iA
\\R_0^+
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "times" iA
\times 
endsnippet

context "math()"
priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}$0
endsnippet

context "math()"
snippet trans "transpose" iA
^{\top}$0
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet para "parallel" iA
 \parallel
endsnippet

context "math()"
snippet abs "absolute" wA
|$1| $0
endsnippet

context "math()"
snippet asterisk "ast" iA
^{*}$0
endsnippet

context "math()"
snippet mid "mid" iA
 \mid 
endsnippet

context "math()"
snippet || "mid" iA
 \mid 
endsnippet

context "math()"
snippet seq "subsetequal" Ai
\subseteq
endsnippet

context "math()"
snippet sus "subset" Ai
\subset 
endsnippet

context "math()"
snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

context "math()"
snippet NN "n" iA
\N
endsnippet

context "math()"
snippet cap "cap" iA
\cap 
endsnippet

context "math()"
snippet cup "cup" iA
\cup 
endsnippet

context "math()"
snippet bcup "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet bcap "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet OO "emptyset" iA
\O
endsnippet

context "math()"
snippet RR "real" iA
\mathbb{R}
endsnippet

context "math()"
snippet QQ "Q" iA
\Q
endsnippet

context "math()"
snippet ZZ "Z" iA
\Z
endsnippet

context "math()"
snippet <! "normal" iA
\triangleleft 
endsnippet

context "math()"
snippet <> "hokje" iA
\diamond 
endsnippet

context "math()"
snippet rut "square" iA
\square 
endsnippet

context "math()"
snippet dia "diamond" iA
\diamond 
endsnippet

context "math()"
snippet lor "or" iA
\lor 
endsnippet

context "math()"
snippet land "and" iA
\land 
endsnippet

context "math()"
snippet neg "negate" iA
\neg 
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet bb "bbmath" iA
\mathbb{$1}$0
endsnippet

context "math()"
snippet bx "bfx" iA
\textbf{x}$0
endsnippet

context "math()"
snippet by "bfy" iA
\textbf{y}$0
endsnippet

context "math()"
snippet bf "textbf" iA
\textbf{$1}$0
endsnippet

context "math()"
snippet cal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

context "math()"
snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

context "math()"
snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 100
context "math()"
snippet "((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)oset" "overset" riA
\overset{$2}{`!p snip.rv=match.group(1)`}$0
endsnippet

priority 10
context "math()"
snippet "uset" "underset" riA
\underset{$2}{$1:${VISUAL}}$0
endsnippet

priority 10
context "math()"
snippet "oset" "overset" riA
\overset{$2}{$1:${VISUAL}}$0
endsnippet

priority 100
context "math()"
snippet "((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)ubrace" "underbrace" riA
\underbrace{`!p snip.rv=match.group(1)`}_{$2}$0
endsnippet

priority 10
context "math()"
snippet "ubrace" "underbrace" riA
\underbrace{$1:${VISUAL}}_{$2}$0
endsnippet

priority 10
context "math()"
snippet "tilde" "tilde" riA
\tilde{$1}$0
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)tilde" "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "dot" "dot" riA
\dot{$1}$0
endsnippet

priority 100
context "math()"
snippet "((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)dot" "dot" riA
\dot{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)hat' "symbol hat" wrA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet


context "math()"
snippet HH "H" iA
\mathbb{H}
endsnippet

context "math()"
snippet DD "D" iA
\mathbb{D}
endsnippet

# vim:ft=snippets
